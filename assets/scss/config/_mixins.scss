/*
|--------------------------------------------------------------------------
| MIXINS & FUNCTIONS
|--------------------------------------------------------------------------
*/


/**
 * BREAKPOINT MIXIN
 *
 * Using the breakpoint list defined in `_vars.scss`
 *
 * Usage:
 * `@include bp(xs)` => @media (min-width: xs)
 * `@include bp(xs,max)` => @media (max-width: xs)
 * `@include bp(xs,md)` => @media (min-width: xs) and (max-width: md)
 */
@mixin bp($bp,$type:min) {
    $value: map-get($breakpoints, $bp);

    @if $value != null {
        @if $type == min {
            @media (min-width: $value) {
              @content;
            }
        } @else if $type == max {
            @media (max-width: $value) {
              @content;
            }
        } @else {
            // Get $type as second max. breakpoint
            $value2: map-get($breakpoints, $type);
            @if $value2 != null {
                @media (min-width: $value) and (max-width: $value2) {
                  @content;
                }
            }@else {
                @warn "Unfortunately, no value could be retrieved from `#{$type}`. "
                    + "Please make sure it is defined in `$breakpoints` map.";
            }
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$bp}`. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}

/**
 * Helper Function for rem Fallback Mixin
 */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/**
 * REM FALLBACK MIXIN
 * Source: <https://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/>
 *
 * Usage:
 * `@include rem(margin, 10, 20, 30, 40);` =>
 * `body {
 *   margin: 160px 320px 480px 640px;
 *   margin: 10rem 20rem 30rem 40rem;
 * }`
 */
@mixin rem($property, $values...) {
    $max: length($values);
    $pxValues: '';
    $remValues: '';

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $pxValues: #{$pxValues + $value*16}px;

        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $remValues: #{$remValues + $value}rem;

        @if $i < $max {
            $remValues: #{$remValues + " "};
        }
    }

    #{$property}: $pxValues;
    #{$property}: $remValues;
}

/**
 * font-size REM Fallback Helper Mixin
 */
@mixin font-size($size){
    @include rem('font-size', $size);
}
